import telebot
import json
import datetime as dt


def read_id_or_api_key(file_path):
    with open(file_path, 'r+') as f:
        key = f.readline().strip()
        assert key
        print(f'Got {file_path.split("/")[-1]}')
    return key


API_KEY = read_id_or_api_key('input/API_KEY')
TEACHER_ID = read_id_or_api_key('input/teacher_id')

BOT = telebot.TeleBot(API_KEY, parse_mode=None)


def read_file():
    with open('output/questions.json', 'r', encoding='utf-8') as f:
        try:
            data = json.loads(f.read())
            print('Content loaded from json')
        except json.JSONDecodeError:
            print('Questions file is empty, filling...')
            write_to_file({"number_of_questions": 0})
            data = read_file()

    return data


def write_to_file(data):
    with open('output/questions.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(data, ensure_ascii=False, indent=2))
        print(f'Content written in json\n')


@BOT.message_handler(commands=['start', 'help'])
def send_welcome(command):
    text = """–ü—Ä–∏–≤–µ—Ç, –ø–∏—à–∏ —Å—é–¥–∞ –µ—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫—É—Ä—Å—É, –Ω–µ –±–æ–π—Å—è.
–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω —Ç–∞–∫, —á—Ç–æ —è –Ω–µ —Å–º–æ–≥—É —É–≤–∏–¥–µ—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ —á—Ç–æ –æ–Ω –∞–Ω–æ–Ω–∏–º–µ–Ω.
–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞ —Ü–µ–ª–∞—è —Ç–µ–º–∞, —Ç–æ –ø–∏—à–∏ –µ—ë, –Ω–æ –ª—É—á—à–µ –∫–æ–Ω–µ—á–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø–æ –Ω–µ–π. 
    """

    print(f'–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command.text}')
    BOT.reply_to(command, text)


@BOT.message_handler(func=lambda message: True)
def get_question(message):
    if len(message.text) > 500:
        BOT.reply_to(message,
                     '–ü—Ä–æ—Å—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.')
        return

    answer = f"""–•–æ—Ä–æ—à–æ, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: "{message.text}"
–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω. –ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å.üôÉ"""

    print(f'\nGot new question: "{message.text}"')

    BOT.send_message(chat_id=TEACHER_ID, text=f'‚ùó–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, "{message.text}"')

    try:
        message.text.encode(encoding='utf-8')
    except UnicodeEncodeError:
        print('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π.')
        BOT.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —É–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã –∏ —Å–º–∞–π–ª–∏–∫–∏')
        return

    file_data['number_of_questions'] += 1

    file_data[str(file_data['number_of_questions'])] = {
        'date': str(dt.datetime.now().date()),
        'time': str(dt.datetime.now().time())[:-10],
        'text': message.text
    }

    write_to_file(file_data)
    BOT.reply_to(message, answer)


if __name__ == '__main__':
    file_data = read_file()
    print('–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É\n')
    BOT.infinity_polling(timeout=5)
